#!/bin/bash

set -e

# ---------------------------
# Nexus Prover Installer (Ubuntu 24.04+)
# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–µ—Ä–µ–∑ Docker –∑ glibc >=2.39
# ---------------------------

# üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker
if ! command -v docker &> /dev/null; then
  echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ü—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞."
  echo "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: https://docs.docker.com/engine/install/"
  exit 1
fi

# –ó–∞–ø–∏—Ç Node ID —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫ –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if [[ -z "$NODE_ID" ]]; then
  echo -n "üî¢ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à NODE ID: "
  read NODE_ID
fi
NODE_ID_CLEAN=$(echo "$NODE_ID" | tr -d '[:space:]' | sed 's/[^a-zA-Z0-9_-]//g')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–≤—ñ–¥
if [[ -z "$NODE_ID_CLEAN" ]]; then
  echo "‚ùå –ü–æ–º–∏–ª–∫–∞: Node ID –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω—ñ —Å–∏–º–≤–æ–ª–∏"
  exit 1
fi

IMAGE_NAME="nexusprover"

# –ö—Ä–æ–∫ 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
mkdir -p ~/nexus-prover && cd ~/nexus-prover

# –ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Dockerfile
cat <<EOF > Dockerfile
FROM ubuntu:24.04

RUN apt update && apt install -y \
    curl unzip ca-certificates \
    libssl-dev libcurl4-openssl-dev \
    tzdata bsdutils

RUN useradd -ms /bin/bash prover

USER prover
WORKDIR /home/prover
ENV HOME=/home/prover

RUN curl -sSf https://cli.nexus.xyz/ -o install.sh \
 && chmod +x install.sh \
 && NONINTERACTIVE=1 ./install.sh \
 || echo "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: Nexus CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –¶–µ –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø—ñ–¥ —á–∞—Å Testnet III."

COPY --chown=prover:prover entrypoint.sh /home/prover/entrypoint.sh
RUN chmod +x /home/prover/entrypoint.sh

ENTRYPOINT ["/home/prover/entrypoint.sh"]
EOF

# –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
cat <<EOF > entrypoint.sh
#!/bin/bash

NODE_ID_CLEAN=\$(echo "\$NODE_ID" | tr -d '[:space:]' | sed 's/[^a-zA-Z0-9_-]//g')

if [[ -z "\$NODE_ID_CLEAN" ]]; then
  echo "‚ùå NODE_ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
  exit 1
fi

for i in {1..10}; do
  if [[ -x /home/prover/.nexus/bin/nexus-network ]]; then
    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ nexus-network. –ó–∞–ø—É—Å–∫..."
    script -q -c "/home/prover/.nexus/bin/nexus-network start --node-id \"\$NODE_ID_CLEAN\"" /dev/null
    exit \$?
  fi
  echo "üîÑ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—è–≤–∏ nexus-network... –°–ø—Ä–æ–±–∞ \$i"
  sleep 5
  done

echo "‚ö†Ô∏è nexus-network —Ç–∞–∫ —ñ –Ω–µ –∑'—è–≤–∏–≤—Å—è. –ú–æ–∂–ª–∏–≤–æ, Testnet III —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ."
exit 0
EOF

# –ö—Ä–æ–∫ 4: –ü–æ–±—É–¥–æ–≤–∞ Docker-–æ–±—Ä–∞–∑—É
sudo docker build -t $IMAGE_NAME .

# –ö—Ä–æ–∫ 5: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
SERVICE_NAME="nexus-docker-prover"
SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME.service"

sudo tee $SERVICE_FILE > /dev/null <<EOF
[Unit]
Description=Nexus Prover Docker Container
After=docker.service
Requires=docker.service

[Service]
Restart=always
ExecStart=/usr/bin/docker start -a nexus-instance
ExecStop=/usr/bin/docker stop -t 2 nexus-instance

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl enable $SERVICE_NAME

# –ö—Ä–æ–∫ 6: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
sudo docker rm -f nexus-instance &>/dev/null || true
sudo docker create \
  --name nexus-instance \
  --restart unless-stopped \
  -e NODE_ID=$NODE_ID_CLEAN \
  $IMAGE_NAME

# –ö—Ä–æ–∫ 7: –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ systemd
sudo systemctl start $SERVICE_NAME

# –ö—Ä–æ–∫ 8: –ì–æ—Ç–æ–≤–æ
echo "‚úÖ Nexus Prover –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ!"
echo "üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏: docker logs -f nexus-instance"
echo "üõë –ó—É–ø–∏–Ω–∏—Ç–∏: docker stop nexus-instance"
echo "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏: docker restart nexus-instance"
echo "üß∑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —è–∫ systemd-—Å–µ—Ä–≤—ñ—Å: $SERVICE_NAME"
echo "üëâ NODE ID –±—É–≤ –∑—á–∏—Ç–∞–Ω–∏–π –ø—ñ–¥ —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è. –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç."
echo "üíô –°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!"
echo

echo "üìå –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º (systemd):"
echo "üîç –°—Ç–∞—Ç—É—Å:     sudo systemctl status $SERVICE_NAME"
echo "üü¢ –ó–∞–ø—É—Å–∫:     sudo systemctl start $SERVICE_NAME"
echo "üî¥ –ó—É–ø–∏–Ω–∫–∞:    sudo systemctl stop $SERVICE_NAME"
echo "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: sudo systemctl restart $SERVICE_NAME"
echo "üö´ –í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: sudo systemctl disable $SERVICE_NAME"

